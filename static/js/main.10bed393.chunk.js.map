{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","WSClient","WebSocket","e","console","log","App","state","loading","data","onopen","setTimeout","setState","onmessage","message","stocks","createTableData","JSON","parse","this","forEach","stock","prev","Object","keys","find","d","increase","price","ticker","text","toFixed","lastUpdate","Date","className","src","logo","alt","Component","StocksTable","getTDBG","props","map","i","key","join","getTime","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,kC,iHCGvCC,E,iGACJ,IACEA,EAAW,IAAIC,UAAU,4BAC1B,MAAMC,GACLC,QAAQC,IAAIF,G,IAqFCG,E,2MAhFbC,MAAQ,CACNC,SAAS,EACTC,KAAM,I,mFAGa,IAAD,OAClBR,EAASS,OAAS,WAChBC,YAAW,WACT,EAAKC,SAAU,CAACJ,SAAS,MACzB,MAGJP,EAASY,UAAY,SAAAC,GACnB,IAAMC,EAAU,EAAKC,gBAAgBC,KAAKC,MAAMJ,EAAQL,OACxD,EAAKG,SAAS,CAACH,KAAMM,O,sCAITA,GAAS,IAChBN,EAAQU,KAAKZ,MAAbE,KAmCP,OAjCAM,EAAOK,SAAS,SAAAC,GAEd,GAAIZ,EAAMY,EAAM,IAAM,CACpB,IAAMC,EAAOC,OAAOC,KAAKf,GAAMgB,MAAM,SAAAC,GAAC,OAAIA,IAAML,EAAM,MAElDM,EAAW,KAEZL,IACGb,EAAKa,GAAMM,MAAMP,EAAM,GACzBM,GAAW,EACHlB,EAAKa,GAAMM,MAAMP,EAAM,KAC/BM,GAAW,IAIflB,EAAMY,EAAM,IAAO,CACjBQ,OAAQR,EAAM,GACdO,MAAOP,EAAM,GACbS,KAAMT,EAAM,GAAGU,QAAQ,GACvBJ,WACAK,WAAY,IAAIC,WAGlBxB,EAAMY,EAAM,IAAO,CACjBQ,OAAQR,EAAM,GACdO,MAAOP,EAAM,GACbS,KAAMT,EAAM,GAAGU,QAAQ,GACvBJ,SAAU,KACVK,WAAY,IAAIC,SAKfxB,I,+BAIC,IAAD,EACiBU,KAAKZ,MAAtBC,EADA,EACAA,QAASC,EADT,EACSA,KAEhB,OACE,yBAAKyB,UAAU,OACb,4BAAQA,UAAS,qBAAiB1B,EAAU,GAAK,8BAAhC,MACf,yBAAK2B,IAAKC,IAAMF,UAAS,mBAAe1B,EAAU,GAAI,yBAA4B6B,IAAI,SACrF7B,GACC,4CAMDA,GAAWC,GACZ,kBAAC,EAAD,CAAaM,OAAQN,S,GA3Eb6B,aAqFZC,E,2MAEJC,QAAU,SAAAb,GACR,OAAiB,OAAbA,EAA2B,IACd,IAAbA,EAA2B,YACd,IAAbA,EAA4B,gBAAhC,G,wEAGS,IAAD,OACDZ,EAAUI,KAAKsB,MAAf1B,OACDS,EAAOD,OAAOC,KAAMT,GAG1B,OACE,2BAAOmB,UAAU,cACf,+BACE,4BACE,sCACA,qCACA,iDAGJ,+BAEIV,EAAKkB,KAAI,SAAChB,EAAGiB,GAAJ,OACP,wBAAIC,IAAG,UAAKD,IACV,4BAAM5B,EAAOW,GAAGG,QAChB,wBAAKK,UAAW,CAAC,oBAAqB,EAAKM,QAASzB,EAAOW,GAAGC,WAAYkB,KAAK,MAAS9B,EAAOW,GAAGI,MAClG,gCAAOf,EAAOW,GAAGM,WAAWc,UAA5B,e,GA5BUR,aCnFNS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.10bed393.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nlet WSClient;\ntry{\n  WSClient = new WebSocket('ws://stocks.mnet.website');\n}catch(e) {\n  console.log(e);\n}\n\nclass App extends Component {\n\n  state = {\n    loading: true,\n    data: []\n  }\n\n  componentDidMount() {\n    WSClient.onopen = () => {\n      setTimeout(()=> {\n        this.setState( {loading: false} )\n      },500);\n    }\n\n    WSClient.onmessage = message => {\n      const stocks =  this.createTableData(JSON.parse(message.data))\n      this.setState({data: stocks});\n    }\n  }\n\n  createTableData(stocks) {\n    const {data} = this.state;\n\n    stocks.forEach( stock => {\n\n      if( data[ stock[0] ] ){\n        const prev = Object.keys(data).find( d => d === stock[0] );\n\n        let increase = null\n          \n        if(prev) {\n          if( data[prev].price>stock[1] ) {\n            increase = true;\n          }else if (data[prev].price<stock[1] ) {\n            increase = false;\n          }\n        }\n\n        data[ stock[0] ] = {\n          ticker: stock[0],\n          price: stock[1],\n          text: stock[1].toFixed(2),\n          increase,\n          lastUpdate: new Date()\n        }\n      }else{\n        data[ stock[0] ] = {\n          ticker: stock[0],\n          price: stock[1],\n          text: stock[1].toFixed(2),\n          increase: null,\n          lastUpdate: new Date()\n        }\n      }\n    } )\n\n    return data;\n\n  }\n  \n  render() {\n    const {loading, data} = this.state;\n\n    return (\n      <div className=\"App\">\n        <header className={`App-header ${ loading ? \"\" : \"App-header-loading-complete\" } `}>\n          <img src={logo} className={`App-logo ${ loading ? \"\": \"logo-loading-complete\" }`} alt=\"logo\" />\n          {loading && \n            <p>\n              Loading ...\n            </p>\n          }\n        </header>\n        {\n          !loading && data && \n          <StocksTable stocks={data}/>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nclass StocksTable extends Component {\n\n  getTDBG = increase => {\n    if( increase === null ) return \"\";\n    if( increase === true ) return \"increase\";\n    if( increase === false ) return \"decrease\";\n  }\n\n  render () {\n    const {stocks} = this.props;\n    const keys = Object.keys( stocks );\n    // return <div>text</div>\n\n    return (\n      <table className=\"pure-table\">\n        <thead>\n          <tr>\n            <th>Ticker</th>\n            <th>Price</th>\n            <th>Last Updated at</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            keys.map((d, i)=> (\n              <tr key={`${i}`} >\n                <td>{ stocks[d].ticker }</td>\n                <td  className={[\"Stocks-price-cell\", this.getTDBG( stocks[d].increase )].join(\" \")} >{ stocks[d].text }</td>\n                <td> { stocks[d].lastUpdate.getTime() } </td>\n              </tr>\n            ))\n          }\n        </tbody>\n      </table>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}